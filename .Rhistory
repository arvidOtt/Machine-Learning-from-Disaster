install.packages("RWeka")
library(RWeka)
library(rJava)
library(RWeka)
library(RWeka)
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
temperature[2]
## examples of accessing items in vector
# include items in the range 2 to 3
temperature[2:3]
# exclude item 2 using the minus sign
temperature[-2]
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
blood <- factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
subject_name[1]
temperature[1]
flu_status[1]
gender[1]
blood[1]
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1])
View(subject1)
subject1
subject1[2]
subject1[c("temperature", "flu_status")]
pt_data <- data.frame(subject_name, temperature, flu_status, gender,
blood, stringsAsFactors = FALSE)
pt_data
pt_data$subject_name
pt_data[c("temperature", "flu_status")]
pt_data[c(1, 3), c(2, 4)]
pt_data[, 1]
pt_data[1, ]
pt_data[ , ]
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5)]
m <- matrix(c('a', 'b', 'c', 'd'), nrow = 2)
m
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
library(readr)
usedcars <- read_csv("Desktop/ML with R/chapter 2/usedcars.csv")
View(usedcars)
str(usedcars)
View(usedcars)
View(usedcars)
# summarize numeric variables
summary(usedcars$year)
summary(usedcars[c("price", "mileage")])
View(usedcars)
View(usedcars)
range(usedcars$price)
diff(range(usedcars$price))
IQR(usedcars$price)
quantile(usedcars$price)
quantile(usedcars$price, seq(from = 0, to = 1, by = 0.20))
boxplot(usedcars$price, main="Boxplot of Used Car Prices",
ylab="Price ($)")
boxplot(usedcars$mileage, main="Boxplot of Used Car Mileage",
ylab="Odometer (mi.)")
hist(usedcars$price, main = "Histogram of Used Car Prices",
xlab = "Price ($)")
hist(usedcars$mileage, main = "Histogram of Used Car Mileage",
xlab = "Odometer (mi.)")
var(usedcars$price)
sd(usedcars$price)
var(usedcars$mileage)
sd(usedcars$mileage)
table(usedcars$year)
table(usedcars$model)
table(usedcars$color)
model_table <- table(usedcars$model)
prop.table(model_table)
color_table <- table(usedcars$color)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1)
plot(x = usedcars$mileage, y = usedcars$price,
main = "Scatterplot of Price vs. Mileage",
xlab = "Used Car Odometer (mi.)",
ylab = "Used Car Price ($)")
# new variable indicating conservative colors
usedcars$conservative <-
usedcars$color %in% c("Black", "Gray", "Silver", "White")
table(usedcars$conservative)
CrossTable(x = usedcars$model, y = usedcars$conservative)
install.packages("gmodels")
CrossTable(x = usedcars$model, y = usedcars$conservative)
library(gmodels)
CrossTable(x = usedcars$model, y = usedcars$conservative)
#Train Decision Tree
library(C50)
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
train <- read.csv("./Data/train_p.csv")
train$Pclass <- factor(train$Pclass)
train$TravelsWithPartner <- factor(train$TravelsWithPartner)
train$Survived <- factor(train$Survived)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, control = C5.0Control(minCases = 6))
summary(treeModel)
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv")
pred <- predict(treeModel, test[,-c(1:2)])
#Train Decision Tree
library(C50)
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
train <- read.csv("./Data/train_p.csv")
train$Pclass <- factor(train$Pclass)
train$TravelsWithPartner <- factor(train$TravelsWithPartner)
train$Survived <- factor(train$Survived)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, control = C5.0Control(minCases = 6))
summary(treeModel)
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv")
pred <- predict(treeModel, test[,-c(1:2)])
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv", sep=";")
pred <- predict(treeModel, test[,-c(1:2)])
#Load dataset
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
#titanic <- read.csv("./Data/train.csv")
titanic <- read.csv("./Data/test.csv")
summary(titanic)
#Extract Title
library(dplyr)
titanic$Title <- case_when(
grepl("Mrs.",titanic$Name) ~ "Mrs.",
grepl("Mr.",titanic$Name) ~ "Mr.",
grepl("Miss.",titanic$Name) ~ "Miss.",
grepl("Master.",titanic$Name) ~ "Master.",
grepl("Dr.",titanic$Name) ~ "Dr.",
grepl("Rev.",titanic$Name) ~ "Rev.",
TRUE ~ "Other"
)
titanic$Title <- factor(titanic$Title)
#Extract familyname to match couples
titanic$Name <- as.character(titanic$Name)
titanic$FamilyName <- case_when(
titanic$Title == "Mrs." ~ gsub("\\(.*", "", titanic$Name),
titanic$Title == "Mr." ~ titanic$Name,
TRUE ~ ""
)
titanic$FamilyName <- gsub("Mrs.","Mr.", titanic$FamilyName)
titanic$FamilyName <- factor(gsub(" ", "", titanic$FamilyName, fixed = TRUE))
occurences <- table(unlist(titanic$FamilyName))
titanic$FamilyNameCount <- occurences[titanic$FamilyName]
rm(occurences)
titanic$TravelsWithPartner <- ifelse(titanic$FamilyNameCount == 2,1,0)
titanic$TravelsWithPartner <- factor(titanic$TravelsWithPartner)
drops <- c("FamilyName", "FamilyNameCount")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Fill missing Ages with mean age
titanic$Age[is.na(titanic$Age)] <- mean(titanic$Age, na.rm = TRUE)
#Missing Factor Level
levels(titanic$Embarked)[1] = "missing"
#Extract additional info from cabin
titanic$CabinLetter <- substr(titanic$Cabin,1,1)
titanic$CabinLetter <- factor(titanic$CabinLetter)
levels(titanic$CabinLetter)[1] = "missing"
levels(titanic$CabinLetter)
titanic$CabinNumber <- gsub("A|B|C|D|E|F|G|T","", titanic$Cabin)
titanic$CabinNumber <- as.numeric(titanic$CabinNumber)
#Extract additional info from tickets
#titanic$TicketClass <- gsub(" |1|2|3|4|5|6|7|8|9|0|\\.|/","", titanic$Ticket)
#titanic$TicketClass <- sapply(substr(titanic$TicketClass,1,4), tolower)
#titanic$TicketClass <- factor(titanic$TicketClass)
#levels(titanic$TicketClass)[1] = "missing"
#table(titanic$TicketClass)
#Prepare for model
titanic$Pclass <- factor(titanic$Pclass)
drops <- c("Ticket", "Name","Cabin", "CabinNumber")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Save data
#write.csv(titanic, file = "./Data/train_p.csv")
write.csv(titanic, file = "./Data/test_p.csv")
#Load dataset
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
titanic <- read.csv("./Data/train.csv")
#titanic <- read.csv("./Data/test.csv")
summary(titanic)
#Extract Title
library(dplyr)
titanic$Title <- case_when(
grepl("Mrs.",titanic$Name) ~ "Mrs.",
grepl("Mr.",titanic$Name) ~ "Mr.",
grepl("Miss.",titanic$Name) ~ "Miss.",
grepl("Master.",titanic$Name) ~ "Master.",
grepl("Dr.",titanic$Name) ~ "Dr.",
grepl("Rev.",titanic$Name) ~ "Rev.",
TRUE ~ "Other"
)
titanic$Title <- factor(titanic$Title)
#Extract familyname to match couples
titanic$Name <- as.character(titanic$Name)
titanic$FamilyName <- case_when(
titanic$Title == "Mrs." ~ gsub("\\(.*", "", titanic$Name),
titanic$Title == "Mr." ~ titanic$Name,
TRUE ~ ""
)
titanic$FamilyName <- gsub("Mrs.","Mr.", titanic$FamilyName)
titanic$FamilyName <- factor(gsub(" ", "", titanic$FamilyName, fixed = TRUE))
occurences <- table(unlist(titanic$FamilyName))
titanic$FamilyNameCount <- occurences[titanic$FamilyName]
rm(occurences)
titanic$TravelsWithPartner <- ifelse(titanic$FamilyNameCount == 2,1,0)
titanic$TravelsWithPartner <- factor(titanic$TravelsWithPartner)
drops <- c("FamilyName", "FamilyNameCount")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Fill missing Ages with mean age
titanic$Age[is.na(titanic$Age)] <- mean(titanic$Age, na.rm = TRUE)
#Missing Factor Level
levels(titanic$Embarked)[1] = "missing"
#Extract additional info from cabin
titanic$CabinLetter <- substr(titanic$Cabin,1,1)
titanic$CabinLetter <- factor(titanic$CabinLetter)
levels(titanic$CabinLetter)[1] = "missing"
levels(titanic$CabinLetter)
titanic$CabinNumber <- gsub("A|B|C|D|E|F|G|T","", titanic$Cabin)
titanic$CabinNumber <- as.numeric(titanic$CabinNumber)
#Extract additional info from tickets
#titanic$TicketClass <- gsub(" |1|2|3|4|5|6|7|8|9|0|\\.|/","", titanic$Ticket)
#titanic$TicketClass <- sapply(substr(titanic$TicketClass,1,4), tolower)
#titanic$TicketClass <- factor(titanic$TicketClass)
#levels(titanic$TicketClass)[1] = "missing"
#table(titanic$TicketClass)
#Prepare for model
titanic$Pclass <- factor(titanic$Pclass)
drops <- c("Ticket", "Name","Cabin", "CabinNumber")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Save data
write.csv(titanic, file = "./Data/train_p.csv")
#write.csv(titanic, file = "./Data/test_p.csv")
#Load dataset
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
titanic <- read.csv("./Data/train.csv")
#titanic <- read.csv("./Data/test.csv")
summary(titanic)
#Extract Title
library(dplyr)
titanic$Title <- case_when(
grepl("Mrs.",titanic$Name) ~ "Mrs.",
grepl("Mr.",titanic$Name) ~ "Mr.",
grepl("Miss.",titanic$Name) ~ "Miss.",
grepl("Master.",titanic$Name) ~ "Master.",
grepl("Dr.",titanic$Name) ~ "Dr.",
grepl("Rev.",titanic$Name) ~ "Rev.",
TRUE ~ "Other"
)
titanic$Title <- factor(titanic$Title)
#Extract familyname to match couples
titanic$Name <- as.character(titanic$Name)
titanic$FamilyName <- case_when(
titanic$Title == "Mrs." ~ gsub("\\(.*", "", titanic$Name),
titanic$Title == "Mr." ~ titanic$Name,
TRUE ~ ""
)
titanic$FamilyName <- gsub("Mrs.","Mr.", titanic$FamilyName)
titanic$FamilyName <- factor(gsub(" ", "", titanic$FamilyName, fixed = TRUE))
occurences <- table(unlist(titanic$FamilyName))
titanic$FamilyNameCount <- occurences[titanic$FamilyName]
rm(occurences)
titanic$TravelsWithPartner <- ifelse(titanic$FamilyNameCount == 2,1,0)
titanic$TravelsWithPartner <- factor(titanic$TravelsWithPartner)
drops <- c("FamilyName", "FamilyNameCount")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Fill missing Ages with mean age
titanic$Age[is.na(titanic$Age)] <- mean(titanic$Age, na.rm = TRUE)
#Missing Factor Level
levels(titanic$Embarked)[1] = "missing"
#Extract additional info from cabin
titanic$CabinLetter <- substr(titanic$Cabin,1,1)
titanic$CabinLetter <- factor(titanic$CabinLetter)
levels(titanic$CabinLetter)[1] = "missing"
levels(titanic$CabinLetter)
titanic$CabinNumber <- gsub("A|B|C|D|E|F|G|T","", titanic$Cabin)
titanic$CabinNumber <- as.numeric(titanic$CabinNumber)
#Extract additional info from tickets
titanic$TicketClass <- gsub(" |1|2|3|4|5|6|7|8|9|0|\\.|/","", titanic$Ticket)
titanic$TicketClass <- sapply(substr(titanic$TicketClass,1,4), tolower)
titanic$TicketClass <- factor(titanic$TicketClass)
levels(titanic$TicketClass)[1] = "missing"
table(titanic$TicketClass)
#Prepare for model
titanic$Pclass <- factor(titanic$Pclass)
drops <- c("Ticket", "Name","Cabin", "CabinNumber")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Save data
write.csv(titanic, file = "./Data/train_p.csv")
#write.csv(titanic, file = "./Data/test_p.csv")
#Load dataset
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
#titanic <- read.csv("./Data/train.csv")
titanic <- read.csv("./Data/test.csv")
summary(titanic)
#Extract Title
library(dplyr)
titanic$Title <- case_when(
grepl("Mrs.",titanic$Name) ~ "Mrs.",
grepl("Mr.",titanic$Name) ~ "Mr.",
grepl("Miss.",titanic$Name) ~ "Miss.",
grepl("Master.",titanic$Name) ~ "Master.",
grepl("Dr.",titanic$Name) ~ "Dr.",
grepl("Rev.",titanic$Name) ~ "Rev.",
TRUE ~ "Other"
)
titanic$Title <- factor(titanic$Title)
#Extract familyname to match couples
titanic$Name <- as.character(titanic$Name)
titanic$FamilyName <- case_when(
titanic$Title == "Mrs." ~ gsub("\\(.*", "", titanic$Name),
titanic$Title == "Mr." ~ titanic$Name,
TRUE ~ ""
)
titanic$FamilyName <- gsub("Mrs.","Mr.", titanic$FamilyName)
titanic$FamilyName <- factor(gsub(" ", "", titanic$FamilyName, fixed = TRUE))
occurences <- table(unlist(titanic$FamilyName))
titanic$FamilyNameCount <- occurences[titanic$FamilyName]
rm(occurences)
titanic$TravelsWithPartner <- ifelse(titanic$FamilyNameCount == 2,1,0)
titanic$TravelsWithPartner <- factor(titanic$TravelsWithPartner)
drops <- c("FamilyName", "FamilyNameCount")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Fill missing Ages with mean age
titanic$Age[is.na(titanic$Age)] <- mean(titanic$Age, na.rm = TRUE)
#Missing Factor Level
levels(titanic$Embarked)[1] = "missing"
#Extract additional info from cabin
titanic$CabinLetter <- substr(titanic$Cabin,1,1)
titanic$CabinLetter <- factor(titanic$CabinLetter)
levels(titanic$CabinLetter)[1] = "missing"
levels(titanic$CabinLetter)
titanic$CabinNumber <- gsub("A|B|C|D|E|F|G|T","", titanic$Cabin)
titanic$CabinNumber <- as.numeric(titanic$CabinNumber)
#Extract additional info from tickets
titanic$TicketClass <- gsub(" |1|2|3|4|5|6|7|8|9|0|\\.|/","", titanic$Ticket)
titanic$TicketClass <- sapply(substr(titanic$TicketClass,1,4), tolower)
titanic$TicketClass <- factor(titanic$TicketClass)
levels(titanic$TicketClass)[1] = "missing"
table(titanic$TicketClass)
#Prepare for model
titanic$Pclass <- factor(titanic$Pclass)
drops <- c("Ticket", "Name","Cabin", "CabinNumber")
titanic <- titanic[, !(names(titanic) %in% drops)]
rm(drops)
#Save data
#write.csv(titanic, file = "./Data/train_p.csv")
write.csv(titanic, file = "./Data/test_p.csv")
#Train Decision Tree
library(C50)
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
train <- read.csv("./Data/train_p.csv")
train$Pclass <- factor(train$Pclass)
train$TravelsWithPartner <- factor(train$TravelsWithPartner)
train$Survived <- factor(train$Survived)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, control = C5.0Control(minCases = 6))
summary(treeModel)
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv", sep=";")
pred <- predict(treeModel, test[,-c(1:2)])
#Train Decision Tree
library(C50)
setwd("~/Kaggle/Titanic/Machine-Learning-from-Disaster")
train <- read.csv("./Data/train_p.csv")
train$Pclass <- factor(train$Pclass)
train$TravelsWithPartner <- factor(train$TravelsWithPartner)
train$Survived <- factor(train$Survived)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, control = C5.0Control(minCases = 6))
summary(treeModel)
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv")
pred <- predict(treeModel, test[,-c(1:2)])
treeModel <- C5.0(train[, -c(1:3)], train$Survived
,trails = 10
, control = C5.0Control(minCases = 6))
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived
,trails = 10)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived,trails = 10)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived,trails = 100)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived,trails = 5)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived)
summary(treeModel)
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv")
pred <- predict(treeModel, test[,-c(1:2)])
result <- data.frame(PassengerId=test$PassengerId, Survived=pred)
write.csv(result,file = "./Data/prediction.csv", row.names = FALSE)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 10)
summary(treeModel)
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv")
pred <- predict(treeModel, test[,-c(1:2)])
result <- data.frame(PassengerId=test$PassengerId, Survived=pred)
write.csv(result,file = "./Data/prediction.csv", row.names = FALSE)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 10)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 12)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 11)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 10)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 9)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 8)
summary(treeModel)
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 10)
summary(treeModel)
#Train SVM
library(kernlab)
classifier <- ksvm(Survived ~ ., data = train, kernel = "vanilladot")
pred <- predict(classifier, train)
library(gmodel)
library(gmodels)
CrossTable(test$fehlerhaft, eh_pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "rbfdot")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "polydot")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "tanhdot")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "laplacedot")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "besseldot")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "anovadot")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "splinedot")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
classifier <- ksvm(Survived ~ ., data = train, kernel = "stringdot")
classifier <- ksvm(Survived ~ ., data = train, kernel = "matrix")
pred <- predict(classifier, train)
library(gmodels)
CrossTable(train$Survived, pred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE
,dnn = c('Ist Wert', 'Vorhersage Wert'))
treeModel <- C5.0(train[, -c(1:3)], train$Survived, trials = 10)
summary(treeModel)
#Evaluate Decision Tree
test <- read.csv("./Data/test_p.csv")
pred <- predict(treeModel, test[,-c(1:2)])
result <- data.frame(PassengerId=test$PassengerId, Survived=pred)
write.csv(result,file = "./Data/prediction.csv", row.names = FALSE)
